■例外処理
・catchブロックでエラーが処理された後、tryブロック内の残りのコードは実行されない。


■シンプルバージョン
----------------------------------------------------------------------------------
try{
    console.log(person.name);              // 未定義の変数参照でエラー発生
    console.log("この行は実行されません"); // エラーが発生しているので実行されない
}catch(err){
    console.log(err.message);    // エラーメッセージの表示
    console.error(err.message);  // エラーメッセージが強調して表示される
}finally{
    console.log("プログラムを終了します。");
}
----------------------------------------------------------------------------------


■instanceofを利用したエラー内容切り分け
------------------------------------------------------------------------
try{
    ...
}catch(err){
    ;// instanceof演算子で例外オブジェクトの型を調べて処理を分ける
    if(err instanceof TypeError){ 
        ...
    }else if(err instanceof RangeError){
        ...
    }else{
        ...
    }
}
※ 補足
正確には instanceof は左オペランドのオブジェクトのプロトタイプチェーンのどこかに
右オペランドのオブジェクト（コンストラクタ）のprototypeプロパティが
存在している場合true
存在しない場合は false を返す演算子。
プロトタイプによる継承については「13. クラスとインスタンス」で詳しく説明
------------------------------------------------------------------------



■例外スロー
------------------------------------------------------------------------
const TAX_RATE = 10;  // 税率
function calcTax(price){
    if(price < 0){
    ;// ▼ messageプロパティの値を引数に渡し、newで例外オブジェクトを作成しスロー
        throw new RangeError("価格に負の値を指定できません。");
    }
    return price * TAX_RATE / 100;
}
try{
    calcTax(-100);
}catch(error){
    console.error(error);
}
------------------------------------------------------------------------



■エラー
|-----------------|---------------------------------------------------------------------------------|
| EvalError       | グローバル関数の eval() に関して発生するエラーを表します。                     
| InternalError   | 深すぎる再帰処理など、JavaScriptエンジンの内部で発生したエラーを表します。    
| RangeError      | 変数や引数で渡された数値が、有効範囲外であることで発生したエラーを表します。 
| ReferenceError  | 不正な参照から参照先の値を取得したことで発生したエラーを表します。           
| SyntaxError     | 構文に誤りがあり発生したエラーを表します。                                    
| TypeError       | 変数または引数の型が有効でない場合に発生したエラーを表します。                 
| URIError        | グローバル関数の encodeURI() または decodeURI() に不正な引数が渡されたことで発生したエラーを表します。
| AggregateError  | 複数のエラーが発生した場合に使用されるエラー。通常、`Promise.all()` などの集約で発生する。 
| OOMError        | メモリ不足（Out of Memory）によって発生したエラー。                         
| AbortError      | 非同期処理（例えば Fetch API）で処理が中断された場合に発生するエラー。      
|-----------------|---------------------------------------------------------------------------------|


