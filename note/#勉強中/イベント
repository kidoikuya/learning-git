■その他
//;defer付きのスクリプトは、DOMContentLoadedイベントよりも先に実行
<script src="./load-event.js" defer></script>



■ページ読み込み
//;ページ内の全リソース（HTML、CSS、画像、JS等）が完全に読み込まれた後に実行
window.addEventListener("load", () => {  //処理内容  });

//;ユーザーがページを離れようとする直前に実行される
window.addEventListener("beforeunload", (event) => {
  // ページを離れようとする際に警告を表示するなど、確認が必要な処理を実行
  event.returnValue = "ページを離れますか？";
});

//;ページが完全にアンロードされる時に実行される
window.addEventListener("unload", () => {
  // ページが完全にアンロードされる直前に実行される
  // リソースのクリーンアップなどに使用される
});

//;リソースの読み込みエラーやJavaScriptエラーが発生したときに実行される
window.addEventListener("error", (event) => {
  // リソース（画像やスクリプトなど）の読み込みエラーや、JavaScriptエラーが発生したときに実行
  console.log("エラーが発生しました:", event.message);
});



■ドキュメント読み込み
//;HTMLが完全に読み込まれ、DOMが構築された後に実行される（画像やスタイルシートはまだ読み込まれていない場合がある）
document.addEventListener("DOMContentLoaded", () => {
  // HTMLが解析され、DOMツリーが構築された段階で実行される
  // CSSや画像などのリソースはまだ読み込まれていない場合もある
});

//;ドキュメントの読み込み状態が変更されるたびに発生する
document.addEventListener("readystatechange", () => {
  // ドキュメントの読み込み状態（loading、interactive、complete）が変わるたびに実行される
  if (document.readyState === "interactive") {
    // DOMが構築されたが、リソースがまだ読み込まれていない場合
    console.log("DOMが構築されました");
  }
});



■画面変化
//;ウィンドウの大きさが変更されたときに発生
window.addEventListener("resize", () => {  // 処理内容
});

//;スマートフォンを回転させるなど、画面の向きが変更されたときに発生
window.addEventListener("orientationchange", () => {  // 処理内容
});

//;要素がフルスクリーンモード表示に切り替わったり、終了したりしたときに発生
window.addEventListener("fullscreenchange", () => {  // 処理内容
});



■マウス操作 ／タッチ操作のイベント
//;要素内にポインターがある状態で、ユーザーがマウスをクリックしたときに発生（mousedown → mouseup の後に発生）
window.addEventListener("click", () => {  // 処理内容
});

//;要素内にポインターがある状態で、ユーザーがマウスをダブルクリックしたときに発生
window.addEventListener("dblclick", () => {  // 処理内容
});

//;要素内にポインターがある状態で、ユーザーがマウスのボタンを押下したときに発生
window.addEventListener("mousedown", () => {  // 処理内容
});

//;要素内にポインターがある状態で、ユーザーがマウスのボタンを離したときに発生
window.addEventListener("mouseup", () => {  // 処理内容
});

//;ポインターがこの要素もしくは子要素の外から中へ移動したときに発生
window.addEventListener("mouseover", () => {  // 処理内容
});

//;ポインターが要素の外から中に移動したときに発生（mouseover と違い、伝搬されません）
window.addEventListener("mouseenter", () => {  // 処理内容
});

//;要素内でポインターが移動したときに発生
window.addEventListener("mousemove", () => {  // 処理内容
});

//;ポインターがこの要素もしくは子要素の中から外へ移動したときに発生
window.addEventListener("mouseout", () => {  // 処理内容
});

//;ポインターが要素の中から外に移動したときに発生（mouseout と違い、伝搬されません）
window.addEventListener("mouseleave", () => {  // 処理内容
});

//;1つ以上のタッチポイントが配置されたときに発生
window.addEventListener("touchstart", () => {  // 処理内容
});

//;1つ以上のタッチポイントが移動したときに発生
window.addEventListener("touchmove", () => {  // 処理内容
});

//;1つ以上のタッチポイントが取り除かれたときに発生
window.addEventListener("touchend", () => {  // 処理内容
});

//;1つ以上のタッチポイントが何らかの理由で中断されたときに発生
window.addEventListener("touchcancel", () => {  // 処理内容
});


■未整理
【2. キーボード関連のイベント】
keydown       : キーが押されたときに発生
keypress      : （非推奨）キーが押されたときに発生
keyup         : キーが離されたときに発生

【3. フォーム関連のイベント】
submit        : フォームが送信されたときに発生
change        : 入力値が変更されたときに発生（フォーカス離脱時）
input         : 入力値が変更されたときに発生（リアルタイム）
focus         : 要素がフォーカスを得たときに発生
blur          : 要素がフォーカスを失ったときに発生
reset         : フォームがリセットされたときに発生
invalid       : 入力が無効のときに発生（バリデーションエラー）

【4. ウィンドウ関連のイベント】
load          : ページやリソースが完全に読み込まれたときに発生
unload        : ページがアンロードされたときに発生
resize        : ウィンドウサイズが変更されたときに発生
scroll        : ページがスクロールされたときに発生

【5. ドラッグ & ドロップ関連のイベント】
drag          : 要素がドラッグされているときに発生
dragstart     : ドラッグが開始されたときに発生
dragend       : ドラッグが終了したときに発生
dragenter     : ドラッグ要素がドロップターゲットに入ったとき
dragover      : ドラッグ要素がドロップターゲット上にあるとき
dragleave     : ドラッグ要素がドロップターゲットから出たとき
drop          : ドラッグ要素がドロップされたときに発生

【6. タッチ関連のイベント】
touchstart    : タッチが開始されたときに発生
touchmove     : タッチが移動したときに発生
touchend      : タッチが終了したときに発生
touchcancel   : タッチがキャンセルされたときに発生

【7. その他のイベント】
contextmenu   : 右クリックメニューが表示されたときに発生
wheel         : マウスホイールが操作されたときに発生
animationstart: CSSアニメーションが開始したときに発生
animationend  : CSSアニメーションが終了したときに発生
animationiteration : CSSアニメーションが繰り返されたときに発生
transitionend : CSSトランジションが終了したときに発生






■フェーズ
・キャプチャリングフェーズ
  clickした場合、DOMツリーの最上位にある window オブジェクトで発生する。
  clickイベントがclickされたsection要素まで繰り返し発生していく段階のこと。
  この段階ではイベントハンドラーは呼び出されずに次フェーズへ移行。
・ターゲットフェーズ
  clickに紐づくイベントハンドラが呼び出されるフェーズ。
・バブリングフェーズ
  反対にDOMツリーを遡って順にイベントが発生し、各要素の click イベントに紐づく全てのイベントハンドラが呼び出されます。
  このフェーズで親要素へとイベントを伝搬させたくない場合は、子要素のイベントハンドラ内で Event オブジェクトの stopPropagation() メソッドを実行。

5. マウス操作やタッチ操作のイベントの座標取得 MouseEvent
マウス操作やタッチ操作によって発生したイベントは、その発生位置を座標値として取得できます。
例えば、マウス操作で発生したイベント（MouseEvent）の位置は、基準となる原点が異なるいくつかのプロパティから取得できます。

プロパティ名            説明
------------------------------------------------------------------------------------------------------
offsetX, offsetY       パディング領域を含む要素の左上端（※）を原点として、イベントが発生した位置を返します。
                       ※ボーダー領域は含みません。そのため、ボーダー上でイベントが発生した場合、座標値は負の値になります。
clientX, clientY       ブラウザの表示領域（ビューポート）の左上端を原点として、イベントが発生した位置を返します。
                        pageX や pageY とは違い、文書がスクロールされている場合でも考慮されません。
pageX, pageY           ブラウザに表示されている文書の左上端を原点として、イベントが発生した位置を返します。
                       文書がスクロールされており、文書の左上端がビューポートの外にある場合でも、見えていない文書の左上端を原点とした座標になります。
screenX, screenY       ディスプレイの表示領域の左上端を原点として、イベントが発生した位置を返します。
x, y                   clientX や clientY の別名です。

ボックスモデルのイメージ
+-----------------------------+
|         マージン           |
|  +-----------------------+  |
|  |         ボーダー      |  |
|  |  +-----------------+  |  |
|  |  |     パディング  |  |  |
|  |  |  +-----------+  |  |  |
|  |  |  | コンテンツ |  |  |
|  |  |  +-----------+  |  |  |
|  |  +-----------------+  |  |
|  +-----------------------+  |
+-----------------------------+