■イベント処理の3つの構文
・タグ内の onclick属性 に実行する処理を記述する
  <botton onclick="関数名やconsole.logなどの命令"></botton>
  関数名を指定しているのが特徴。
・要素のプロパティで指定
  onclick属性に関数オブジェクトを代入している。
・addEventListener()メソッドで定義
  メソッドの引数として関数オブジェクトを渡している。
   同じイベントに対して複数のハンドラを登録出来る。
  →基本的にどれ使ってもいいらしいのでメソッドを使う。

■addEventListenerについて
document.addEventListener("DOMContentLoaded", function() {
  // DOMが完全に構築されてから実行されるコード
});
引数1 に「監視したいイベント名」を指定 "click"、"mouseover"、"DOMContentLoaded" 等。
引数2 に「そのイベントが発生したときに実行する関数（処理）」を指定
引数3 に キャプチャリングフェーズで、イベントハンドラを呼び出したい場合, {capture: true} ※省略時はfalse

■発生イベントの格納先
Eventインタフェースを継承したオブジェクトに格納されハンドラの引数として使う。
プロパティ名	説明
target	        イベントが配信されたオブジェクトへの参照を返します。これがあればthis使わなくて済むっぽい。
currentTarget	現在イベントの対象となっているオブジェクトへの参照を返します。
                このイベントが子孫関係にあるオブジェクトから伝搬されたものである場合、
                最初にイベントが配信された子孫オブジェクトへの参照は target プロパティで取得します。
timeStamp	    文書の読み込みが開始された時間を起点として、このイベントが作成された時刻（ミリ秒単位）を返します。
type	        イベントの種別を表す文字列を返します。

■ドキュメントやリソースの読み込みに関するイベント
HTMLの文書（ドキュメント）や、画像やスタイルシートなどのリソースの読み込みが完了した時点で発生するイベント
読み込みが完了していない文書から要素を取得しようとしたり、読み込み前のリソースに対して特定の処理を行ったりすることで発生するエラーを防ぐ

対象	    アドイベのイベント名   説明
Window	    load	               スタイルシートや画像など、すべての依存するリソースを含めて、ページ全体が読み込まれたときに発生します。
Docoument	DOMContentLoaded	   HTMLの初期文書が完全に読み込まれ、解釈された時点で発生します。
                                   Window の load イベントと違い、スタイルシートや画像などのリソースの読み込みが完了するのを待ちません。

-------------------------------------------------------------------------------------------------------------------------
    // ▼ 画像やスタイルシートなどのリソースすべてが読み込まれた後に実行される
    window.addEventListener("load", () => {
      console.log("load");
      const pElm = document.getElementById("load");
      if (pElm) {
        pElm.textContent += "JavaScriptで文章を追加しました。";
      }
    });
    // ▼ ドキュメント本体の読み込み完了後に実行される
    document.addEventListener("DOMContentLoaded", () => {
      console.log("DOMContentLoaded");
      const pElm = document.getElementById("DOMContentLoaded");
      if (pElm) {
        pElm.textContent += "JavaScriptで文章を追加しました。";
      }
    });
  </script>
    <!-- ▼ defer属性を付けて読み込んだスクリプトファイルはドキュメント読み込み完了時に実行される
         また、このスクリプトはDOMContentLoadedのイベントハンドラよりも前に実行される -->
  <script src="./load-event.js" defer></script>
</head>
-------------------------------------------------------------------------------------------------------------------------

3. 画面の変化に関するイベント
対象              指定するイベント名    説明
--------------------------------------------------------------------
Window            resize                ウィンドウの大きさが変更されたときに発生します。
ScreenOrientation change                スマートフォンを回転させるなど、画面の向きが変更されたときに発生します。
Element           fullscreenchange      要素がフルスクリーンモード表示に切り替わったり、終了したりしたときに発生します。

4. マウス操作 ／タッチ操作のイベント
【 補足：イベントの伝搬 】
イベント名         説明
-----------------------------------------------------------------------------------------------
click             要素内にポインターがある状態で、ユーザーがマウスをクリックしたときに発生します。
                  このイベントは mousedown イベント → mouseup イベントの後に発生します。
dblclick          要素内にポインターがある状態で、ユーザーがマウスをダブルクリックしたときに発生します。
mousedown         要素内にポインターがある状態で、ユーザーがマウスのボタンを押下したときに発生します。
mouseup           要素内にポインターがある状態で、ユーザーがマウスのボタンを離したときに発生します。
mouseover         ポインターがこの要素もしくは子要素の外から中へ移動したときに発生します。
mouseenter        ポインターが要素の外から中に移動したときに発生します。※ mouseover と違い、このイベントは伝搬されません。
mousemove         要素内でポインターが移動したときに発生します。
mouseout          ポインターがこの要素もしくは子要素の中から外へ移動したときに発生します。
mouseleave        ポインターが要素の中から外に移動したときに発生します。※ mouseout と違い、このイベントは伝搬されません。

イベント名        説明
-----------------------------------------------------------------------------------------------
touchstart        1つ以上のタッチポイントが配置されたときに発生します。
touchmove         1つ以上のタッチポイントが移動したときに発生します。
touchend          1つ以上のタッチポイントが取り除かれたときに発生します。
touchcancel       1つ以上のタッチポイントが何らかの理由で中断されたときに発生します。

■フェーズ
・キャプチャリングフェーズ
  clickした場合、DOMツリーの最上位にある window オブジェクトで発生する。
  clickイベントがclickされたsection要素まで繰り返し発生していく段階のこと。
  この段階ではイベントハンドラーは呼び出されずに次フェーズへ移行。
・ターゲットフェーズ
  clickに紐づくイベントハンドラが呼び出されるフェーズ。
・バブリングフェーズ
  反対にDOMツリーを遡って順にイベントが発生し、各要素の click イベントに紐づく全てのイベントハンドラが呼び出されます。
  このフェーズで親要素へとイベントを伝搬させたくない場合は、子要素のイベントハンドラ内で Event オブジェクトの stopPropagation() メソッドを実行。

5. マウス操作やタッチ操作のイベントの座標取得 MouseEvent
マウス操作やタッチ操作によって発生したイベントは、その発生位置を座標値として取得できます。
例えば、マウス操作で発生したイベント（MouseEvent）の位置は、基準となる原点が異なるいくつかのプロパティから取得できます。

プロパティ名            説明
------------------------------------------------------------------------------------------------------
offsetX, offsetY       パディング領域を含む要素の左上端（※）を原点として、イベントが発生した位置を返します。
                       ※ボーダー領域は含みません。そのため、ボーダー上でイベントが発生した場合、座標値は負の値になります。
clientX, clientY       ブラウザの表示領域（ビューポート）の左上端を原点として、イベントが発生した位置を返します。
                        pageX や pageY とは違い、文書がスクロールされている場合でも考慮されません。
pageX, pageY           ブラウザに表示されている文書の左上端を原点として、イベントが発生した位置を返します。
                       文書がスクロールされており、文書の左上端がビューポートの外にある場合でも、見えていない文書の左上端を原点とした座標になります。
screenX, screenY       ディスプレイの表示領域の左上端を原点として、イベントが発生した位置を返します。
x, y                   clientX や clientY の別名です。

ボックスモデルのイメージ
+-----------------------------+
|         マージン           |
|  +-----------------------+  |
|  |         ボーダー      |  |
|  |  +-----------------+  |  |
|  |  |     パディング  |  |  |
|  |  |  +-----------+  |  |  |
|  |  |  | コンテンツ |  |  |
|  |  |  +-----------+  |  |  |
|  |  +-----------------+  |  |
|  +-----------------------+  |
+-----------------------------+

6. キー操作のイベント
addEventListenerで指定するイベント名    説明
-----------------------------------------------------------------------------------------------
keydown           いずれかのキーが押下されたときに発生します。
keyup             押下状態にあるいずれかのキーが解放されたときに発生します。
keypress          文字値を生成するキーが押下されたときに発生します。
                  ※このイベントは現在非推奨になっているため、代わりに keydown イベントを使用してください。

