■サイトの作り
マルチ：読み込みが発生する

CSS：読み込みが発生しない
#page1、#page2という感じでURLが変化している。
これはページ内ジャンプしている。

JS：同じURLでページが切り替わる
HTMLタグをJSプログラムによって生成している。
つまり、JSの範囲内であればサーバとのやり取りはするが
URLが同じままでページの切り替えが出来る。
ちゃんと作りこまないとブラウザバックができない。

React：
JSは同じURLのままでページ切り替えが出来る反面
同じURLのままではブラウザバックが出来なくて不便。
その作りこみが大変だから簡単に作れるようにしようというのがReact Router。

■演習時の注意点
・ブラウザのデバッグ機能を使用すること。
  console.logの結果は、コンソールパネルに表示される。
  DOMAPI演習＞その他＞ブラウザの開発支援ツールの使い方。

■DOM APIとは
ブラウザに備わっている Web API のひとつ
HTML または XML で書かれた文書を操作するためのインターフェースです。
プレーンテキストを解析→DOMツリー作成→ツリーを基に画面表示作成
DOMツリーをJS、DOMAPIを使って修正していく。

■DOMツリー
ドキュメントノード（HTML文書全体を指す）
要素ノード（HTMLのタグ）
テキストノード（タグの内側のテキスト）

■DOMを利用してJSから文書を操作する。
ブラウザを起動すると、グローバルオブジェクト(Windowsオブジェクト)が最上位に定義される。
その下に、documentやconsole等のオブジェクトのプロパティが用意される。
window.console.log()という呼び出し方でなく、console.log()のみで呼び出す。
Windowとwindowは違う、windowはWindow自身の参照を指すイメージ。

■HTML文書内の要素を取得する方法
Documentのメソッド、getElementById()メソッドでid属性を指定すると取得できる。
※タグ名で取得したい場合はgetElementsByTagName()を使う。
<body>
    <h1 id="title">湘南ハイテク企画</h1>
    <script>
        // ▼ id 属性の値が "title" の要素を取得
        const element = document.getElementById("title");
        console.log(element.textContent);  // 湘南ハイテク企画
    </script>
</body>

■オブジェクト作成→Domツリー追加
①アンカータグ作成aタグ相当するオブジェクトを作る
②そのオブジェクトに属性とテキストを追加
③Domツリーに追加(結び付ける)
createElement()メソッドで指定したタグの要素を新規作成する。
※append()で既存の要素の最後に新しい要素やテキストを追加する。
    <script>
        setTimeout(()=>{
            // ▼ p タグの要素オブジェクトを作成
            const element = document.createElement("p");
            element.textContent = "追加された文章";  // 要素内のテキストを設定
            document.body.append(element);  // <body> タグ内の最後に作成した要素を追加
        }, 5_000);
    </script>
追加されたか確認するにはDevelopperToolsの要素タグを監視してみると
処理の進行に伴い随時追加される。(5秒後に処理する内容なら５秒後に追記される)
※属性名とプロパティ名は基本１対１で対応しているがclassはclassNameなので注意。

■addEventListener() イベント処理を登録する
キー入力やマウスクリックや画面タッチ等を起点としたイベントに対する処理を紐づける。
-----------------------------------------------------
    replayBtn.addEventListener('click', () => {
        window.location.reload();
    });
    </script>
-----------------------------------------------------
イベントに対する処理をハンドラーと呼ぶ。

------------------------------------------------------------------------


■①JSの書き方 HTMLに直接<script>を書く方法。
  上から順番に実行されていくので
  処理に応じて<body>や<head>タグ内に配置していく。  

・<a> タグの href 属性を利用して埋め込む
http: や file: と同じプロトコルの位置づけにある javascript: で始まる
JavaScript 疑似プロトコルを利用して、 a タグで表示されるリンクをクリックすると実行される 
JavaScript のコードを文書内に埋め込むことができます。
 ※セキュリティによろしくない非推奨
  <body>
	<!-- href属性に「javascript:」に続けて実行するコードを記述 -->
	<!-- alert() は警告ダイアログボックスを表示する関数 -->
	<a href="javascript:alert('JavaScriptを実行しました');">
		クリックでJavaScriptを実行
	</a>
</body>

・onclick
HTML のタグには onclick という、ユーザーがその要素をクリックした場合に
実行する JavaScript のコードを指定できる属性があります。
このように、ある イベント の発生と紐づけて、特定の処理を行うことを 
イベント処理 といい、Webアプリケーション開発ではこの機能をよく使います。
<body>
    <!-- onclick 属性の値として JavaScript のコードを記述 -->
    <button onclick="alert('JavaScriptを実行しました');">
        クリックでJavaScriptを実行
    </button>
</body>

■外部ファイルとして読み込む方法
HTML内の処理順に応じた位置に<script>タグを配置(超重要)
<script src="./script/my-script.js">
	<!-- 内側にコードを記述することはできません -->
</script>
こんな感じでjsファイルのディレクトリを指定する。

■外部ファイルのコード実行を遅らせる。
<script>はhtmlの解析が行われた後=</body>タグ直前がベター。
<head>タグに<script>を配置したい場合
そのタグ内にdefer属性を付ける方法もある。
HTML内の全要素を解析を終えた後までscriptの実行を遅らせる。
この方法だと</body>タグ直前に書くのと同じ効果が得られる。
<head>
	<meta charset="utf-8">
	<meta content="width=device-width,initial-scale=1" name="viewport">
	<title>JavaScriptのコードを実行する方法</title>
	<script src="script1.js" defer></script>
</head>

■モジュールとして外部ファイルを読み込む方法
最新のブラウザは ECMAScript Modules に対応しています。 
<script>タグ内にtype="module"属性を付与する事が必須。
モジュールとしてこのファイルを読み込むことができます。
<script type="module" src="外部のJavaScriptファイルへのパス" ></script>

■外部ファイルのデメリットを埋めるのがwebpack
外部ファイル数＝外部通信数になるので、規模が大きくなると通信が増えてしまう。
そういう時に活躍するのがwebpack、これで外部ファイルをまとめることで通信がスッキリする。

■<noscript>タグ
ユーザ側のブラウザ等でJavaScriptが無効に設定されている場合
<script>の代わりに<noscript>タグ内の処理が実行される。
サイト側からユーザにJS設定を有効にするよう促す時に使えるタグ。

■Windowsオブジェクトとは
ブラウザのタブ毎で独立したWindowsオブジェクトと考える。
メンバーとしてプロパティやメソッドを持ち、「.」無しでアクセス可能。
JSで実行される全てのJSコマンドは暗黙的にこのオブジェクトを通じてアクセスされる。

■Windowsオブジェクト ～代表的なプロパティ～
※コンソールからプロパティ一覧表示。
→ console.dir(window);
window  :Windowオブジェクト自身の参照を返す。
document：現在のHTMLドキュメントにアクセスするためのDocumentオブジェクト。
location：現在のURL情報を持ち、ページのリダイレクトも行えるLocationオブジェクト。
history ：ブラウザの履歴にアクセスし、前のページや次のページに移動できるHistoryオブジェクト。
console : ブラウザのコンソールへ情報を出力する機能を提供する Console オブジェクトへの参照を返します。
navigator：ブラウザやOSに関する情報（ユーザーエージェントや言語設定など）を持つNavigatorオブジェクト。
screen：ディスプレイの画面サイズや解像度に関する情報を持つScreenオブジェクト。
innerWidth：現在のウィンドウのビューポートの幅（ピクセル単位）。
innerHeight：現在のウィンドウのビューポートの高さ（ピクセル単位）。
localStorage  ：ブラウザにデータを永続的に保存するためのストレージ。mapみたい
sessionStorage：セッションが続く間だけデータを保持するストレージ。mapみたい
※localStorage と sessionStorage が参照するオブジェクトは、
どちらも同じウェブストレージAPIである Storage を継承しているため、
共通のメソッドでデータを管理することができます。
getItem(key)
setItem(key, value)
removeItem(key)
clear()
※Local Storage や Session Storage はドメイン単位でストレージが管理されている
同一ドメインからこれらのストレージを利用するアプリケーションを複数配信する場合は、
キーの衝突を避けたり、 clear() メソッドの実行による一斉削除を行わないなどの考慮が必要。
同一ドメインからであれば共通のストレージを使える。
※ストレージは高度な制御は出来ない
大量の構造化データの管理やトランザクション制御が必要ならindexdDBを使用する。

■Windowsオブジェクト ～代表的なメソッド～
※コンソールからメソッドの一覧表示。
→ console.log(Object.getOwnPropertyNames(window).filter((prop) => typeof window[prop] === 'function'));
alert()：ユーザーにアラートメッセージを表示。
confirm()：確認ダイアログを表示し、ユーザーの確認（OK/キャンセル）を受け取る。
prompt()：ユーザーにテキスト入力を促すプロンプトダイアログを表示。
open()：新しいウィンドウまたはタブで指定したURLを開く。
close()：ウィンドウを閉じる。
setTimeout()：指定した時間後に一度だけ関数を実行。
setInterval()：指定した間隔で繰り返し関数を実行。
clearTimeout()：setTimeoutで設定したタイマーをキャンセル。
clearInterval()：setIntervalで設定した繰り返しタイマーをキャンセル。
addEventListener()：特定のイベント（例：クリック、ロードなど）にリスナーを追加。
removeEventListener()：特定のイベントからリスナーを削除。
scrollTo()：ページを指定した位置までスクロール。

■要素を取得するメソッド
querySelectorとquerySelectorAllは最近増えたメソッド。
ぶっちゃけ、この2つがあれば良いぐらいな感じ。jQueryから逆輸入された。
document.querySelector() や document.querySelectorAll() は、
指定されたCSSセレクタ式に一致する要素を取得するメソッドです。
querySelector() は最初に一致した要素をひとつだけ返し、
querySelectorAll() は一致するすべての要素を返します。
次の例では、<article> の内側にあり、かつ class 属性の値に「star」や「heart」を
持つ要素を取得し、内側のテキストの先頭にそれぞれ星やハートの記号を付与する処理を行っています。
    <script>
        // ▼ querySelector の戻り値は最初に文書内で見つかったElement
        const starElement = document.querySelector("article .star");
        // テキストの先頭に★を付与する
        starElement.textContent = `★ ${starElement.textContent}`;
        // ▼ querySelectorAll の戻り値は NodeList
        const heartList = document.querySelectorAll("article .heart");
        for (const element of heartList) {
            // テキストの先頭に♡を付与する
            element.textContent = `♡ ${element.textContent}`;
        }
    </script>
おまけ
console.logでHTMLCollectionやNodeListを出力すると最終行にlengthが勝手に表示される。
そのコレクション内に含まれる要素の数が自動的にlengthプロパティとして表示される。

■ノードとは
・要素ノード（Element Node）
HTMLやXMLのタグに対応するノード。
例：<div>, <p>, <span>などのタグ要素は、それぞれ独自の要素ノードとして扱われる。

・テキストノード（Text Node）
要素内に含まれるテキストを表します。
例：<p>Hello, World!</p>では、"Hello, World!"がテキストノードです。

・属性ノード（Attribute Node）
getAttribute()やsetAttribute()で操作します。
要素の属性を表しますが、通常は直接アクセスされません。
直接アクセスするならプロパティを使う。element.idとか。
例：<img src="image.jpg" alt="Sample Image">では、srcやaltが属性ノードです。

・コメントノード（Comment Node）
ドキュメント内のHTMLのコメントを表します。※JSの//じゃないので注意。
例：<!-- This is a comment -->はコメントノードです。

・ドキュメントノード（Document Node）
ドキュメント全体を表すルートノードで、すべてのノードのトップレベルの親になります。
通常、documentオブジェクトとして参照されます。

■プロパティの見方
1. 要素ノード (Element)
element.id: 要素のid属性を取得または設定します。
element.className: 要素のクラス名を取得または設定します。
element.tagName: 要素のタグ名を大文字で取得します（例："DIV"）。
element.children: 要素の子要素ノードのHTMLCollectionを取得します。
element.childNodes: 要素のすべての子ノード（要素ノード、テキストノード、コメントノードなど）のNodeListを取得します。
element.style: インラインスタイルを取得または設定します（例：element.style.color）。

2. テキストノード (Text)
textNode.nodeValue: テキストノードの内容を取得または設定します。
textNode.textContent: テキストノードの内容を取得します。
textNode.length: テキストの長さを取得します。

3. コメントノード (Comment)
commentNode.nodeValue: コメントの内容を取得または設定します。
commentNode.nodeType: ノードのタイプを示します（コメントノードの場合は8）。
commentNode.textContent: コメントノードの内容を取得します。

4. 属性ノード (Attr)
attrNode.name: 属性の名前を取得します。
attrNode.value: 属性の値を取得または設定します。

5. ドキュメントノード (Document)
document.documentElement: ドキュメントのルート要素を取得します。
document.childNodes: ドキュメントのすべての子ノードを取得します（通常はhtml要素）。
document.title: ドキュメントのタイトルを取得または設定します。

6. ウィンドウノード (Window)
window.location: 現在のページのURLを取得または設定します。
window.document: 現在のウィンドウに関連付けられたドキュメントオブジェクトを取得します。

まとめ
各ノードタイプには特定のプロパティがあり、ノードの性質や内容を確認するために利用されます。
ノードの種類に応じて適切なプロパティを使用し、情報を取得または設定することが重要です。


■ノード検索
・基本
  主にidやclass、たまにタグ名で検索する。
・クエリセレクター
  class = "btn red big" ※複数クラスを指定する事が出来る。
  classを複数指定して検索する事で特定要素に絞り込める、これがクエリセレクター。
・CSSセレクター
  全部検索していると非効率なので
  検索したノードから親子関係を使ってノードを操作する仕組みがある。



■HTMLElement
XMLは含まない、HTML専用のノード。

■.parentNodeと.parentElementの違い
console.log(document.documentElement.parentNode); // #document（ドキュメントノード）
console.log(document.documentElement.parentElement); // null（ドキュメントノードは要素ノードでないため）

■ノードの作成・挿入・削除
カレントディレクトリを把握しておかないと迷子になる。
要素タブからデバッグするとわかりやすい(要練習)

■プロパティから属性値を取得・更新・設定
要素ノードの属性は基本的に属性名と同名のプロパティから参照できます。
例えば、id 属性の値は、Element.id で取得できます。
一部例外があります。 class 属性は className プロパティで、 
aria 属性のように間に - が入る場合は、キャメルケースに変換したプロパティ名になります。
例えば、aria-hidden 属性の場合は ariaHidden プロパティでアクセスすることになります。

■属性とプロパティの違い（<a>要素のhrefとtargetの例）
1. 属性（Attribute）
HTMLの<a>タグ内に指定された静的な初期設定で、ページ読み込み時にブラウザに読み込まれる値。
getAttribute()やsetAttribute()でJavaScriptから読み取ったり変更したりできますが、
変更はHTMLの初期設定に影響しません。

2. プロパティ（Property）
JavaScriptのDOM要素としてアクセスできる動的な値です。
属性が初期設定を持つのに対し、プロパティはDOM上の要素の現在の状態を示し、
ユーザーの操作やJavaScriptによる変更で即座に反映されます。

■プロパティかメソッドで要素を取得する違い
getAttributeで取得出来るのは初期値
ユーザが入力した値を取得するなら動的なプロパティを使う。
※リセットボタンがある時などにこの挙動が起こる。

■classListプロパティ
Styleタグ内の任意のクラスを操作出来る。
add("")とかremove("クラス名")とか。
toggle(クラス名)だとON/OFFスイッチと同じ
toggle(クラス名,force) これがややこしいので引数２個は使わない方が良さそう。
※force=true/false    true;add()と同じ。false:remove()と同じ。

要素の書き換え---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

■innerHTML プロパティ
ただの代入はテキストとして認識されてしまうが
innerHTMLプロパティに設定した内容はタグ等が解析されHTMLとして解釈される。
例：1行で書いてもインデントも考慮して解釈する。
<body>
<div id="container">
</div>
<script>
    const elm = document.getElementById("container");
    elm.innerHTML = "<h2>果物リスト</h2><ul><li>apple</li><li>banana</li><li>cherry</li></ul>";
</script>
</body>
-------------------------------------------------------------------
<body>
<div id="container">
    <h2>果物リスト</h2>
    <ul>
        <li>apple</li>
        <li>banana</li>
        <li>cherry</li>
    </ul>
</div>
</body>
-------------------------------------------------------------------

※追記ではなく全て置き換わる。
追記したい場合は(Element).innerHTML += "追加したい文書";

■innerText プロパティ
本来、表に見えているテキストのみが取得対象。
HTMLElement.innerText プロパティ（※）を利用すると、
この要素とさらに子孫関係にある要素のテキスト内容を一括して、
結合されたひとつの文字列として取得できます。
反対に、innerText へ文字列を代入した場合は、
innerHTML と同様に、内部がすべて置き換えられます。
innerTextに代入されるのは<p>タグの解析なくただのテキストとして扱われる。
また、代入される文字列に改行文字が含まれている場合は br 要素に変換される。
-------------------------------------------------------------------------------
    <script>
        const container = document.getElementById("container");
        // 子孫関係にある要素も含めて内側のすべてのテキストノードの内容を文字列で取得
        console.log(container.innerText);
        // 文字列を代入すると内側のノードがすべて置き換えられる
        // innerHTMLと違いタグを記述しても要素として扱われることはない
        container.innerText = "<p>新しいテキスト\n改行文字は<br />に変換される</p>";
    </script>
-------------------------------------------------------------------------------
 Elements（要素）パネルを選択すると、改行文字（\n）が br 要素に変換されている。

■textContent プロパティ
innerTextとは違い、本来ユーザから見られないscriptとstyle要素を含む全てのテキストが取得対象。
このノードとさらに子孫関係にあるノードに含まれるテキスト内容を一括して、
結合されたひとつの文字列として取得できます。
この説明だけだと、前章のinnerText プロパティと似ていますが、次の点で大きな違いがあります。

■クロスサイト・スクリプティング めちゃくちゃ大事
絶対にinnerHTMLで入力されたデータをそのまま表示しないようにする。
サニタイジング(無害な文字列であるエスケープ文字列に変換したりして表示させるようにする。)
Webアプリケーションの脆弱性を利用して、ページ内に悪意のあるスクリプトを埋め込む攻撃手法です。
innerHTML で作成したものには、XSSに対する脆弱性があり、入力フォームから悪意のあるスクリプトを埋め込めてしまいます。
innerHTMLでユーザが入力したデータを画面上に表示出来るような仕掛けをしてしまうと
悪意のある人がユーザの個人情報を不正に取得したりされる。有名な脆弱性なので絶対に防ぐように考えて作ること。

■フロントエンジニアのセキュリティスキル
脆弱性でユーザを危険にさらしてしまうのでセキュリティの知識は必要。
体系的に学ぶ安全なWebアプリケーションの作り方

■insertAdjacentHTML()メソッド
innerHTML と同様に XSS に対する脆弱性がある。
既存ノードの破壊を伴わずに新しいノードを挿入できるのが insertAdjacentHTML() メソッド
軽く要素を追加したい時に使う。
・innerHTMLで要素を追加すると？
  ツリーを削除してから要素を作り直す処理になる。
  innerHTML += "<p>追加文書</p>"
  空文字列を代入して真っさらにしたい時とかぐらい、使うのは。
  綺麗にやるならNode.removeChild(node)とかを使う。
・insertAdjacentHTMLで要素を追加
  ツリーはそのまま、要素の追加するので処理が軽い。
・Element.insertAdjacentHTML( position, text )
  指定されたテキストを HTML として解釈し、結果として生成されたノードを DOM ツリーの position で指定された位置に挿入します。

 ■insertAdjacentElement()
  innerHTML と同様に XSS に対する脆弱性がある。
  要素オブジェクト作ってから、ツリーのどこに追加するか指定して追加していく。
  こちらは、HTMLの文書ではなく要素（Element）オブジェクトを挿入します。
・Element.insertAdjacentHTML( position, text )
  呼び出された要素から相対的に見た position で指定された位置に、element を挿入します。

■positionの表記
position文字列	挿入位置
"beforebegin"	要素の直前
"afterbegin"	要素内部の最初の子要素の前
"beforeend"  	要素内部の最後の子要素の後
"afterend"  	要素の直後