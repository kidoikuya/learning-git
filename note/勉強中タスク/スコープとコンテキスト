■スコープ (Scope) 変数や関数がアクセス可能な範囲のこと。
・グローバルスコープ
  変数や関数がプログラムのどこからでもアクセス可能である範囲。
  グローバルスコープで宣言された変数は、プログラム全体からアクセスできます。

・ローカルスコープ（関数スコープ）
  関数内で宣言された変数が、その関数内でのみ有効である範囲。
  外部からはアクセスできません。

・ブロックスコープ
  letやconstで宣言された変数はブロック内でのみ有効（例えば、if文やforループ内）。

--------------------------------------------------------------------
var globalVar = "I am global";

function myFunction() {
    var localVar = "I am local";
    console.log(globalVar);  // グローバル変数にアクセス
    console.log(localVar);   // ローカル変数にアクセス
}
myFunction();
console.log(globalVar);  // "I am global" : グローバルスコープなのでアクセス可能。
console.log(localVar);   // エラー: ローカルスコープのlocalVarはmyFunction関数内でのみ有効。
--------------------------------------------------------------------


■実行コンテキスト
①グローバルコンテキスト
・スクリプトファイルが実行される直前に生成されるコンテキスト。
  グローバルオブジェクト（※）や、Array や Map のような標準組み込みオブジェクト
  parseInt() のようなグローバルオブジェクトで定義されている関数の他に

  "重要ポイント：トップレベルで宣言された独自関数や変数もこのコンテキストで定義される" ←？？？
  独自の関数を関数宣言で定義した場合、それを呼び出したオブジェクトが独自関数のコンテキストのthisに定義される？
  だとしたら、呼び出されるまでがグローバルコンテキストということ？
  だとだとしたら、thisの初期値はグローバルオブジェクトということ？

  "const personみたいに宣言された変数のthisはグローバルオブジェクトであるwindowもしくはglobalを指す"
  アロー関数式でundefineになっちゃうのはこれが原因。

②関数コンテキスト
  関数が実行される直前に生成されるコンテキスト。
  関数の引数や、中で宣言されている変数や関数
  thisや super などの特別なキーワードは、このコンテキストで定義されます。

・コンストラクタ関数でnewキーワードを使って呼び出された場合
  thisは新しく作成されるオブジェクトを指す。

・オブジェクトのメソッドとして呼び出された場合
  メソッド内のthisは、そのメソッドが呼び出されたオブジェクトを指す。

・アロー関数式
  アロー関数式はコンテキストにthisを持っていないため
  外側スコープのコンテキスト内のthisを参照して固定(保持)する。
