■$(IDかDOMオブジェクト)
$( 'div1', 'div2', 'div3' ).invoke( 'hide' );  // $( 'div1' ).hide(); は可能
<div>による画面表示を隠す
<div>タグの例(id属性の値が'div1', 'div2', 'div3'のもの)

■$$(`CSSセレクタ`)
上と同じ処理を別の書き方で書くとこうなる。
$$( 'div[id^="div"]' ).invoke( 'hide' );  // $$( 'div[id^="div"]' ).hide()は不可
idがdivで始まる<div>の画面表示を隠す

■プロトタイプ継承
Prototype.jsはプロトタイプ継承を簡素化するために
"Class.create"の引数に親クラスを指定して子クラスを定義できるため
オブジェクト指向のクラスを簡単に作成できて管理がしやすくなる。
-------------------------------------------------------
// 親クラス
var Animal = Class.create({
  initialize: function(name) {
    this.name = name;
  },
  
  speak: function() {
    console.log(this.name + " makes a noise.");
  }
});

// 子クラス
var Dog = Class.create(Animal, {
  initialize: function($super, name) {
    $super(name); // 親クラスのinitializeを呼び出し、親フィールドnameに値を代入。
  },

  speak: function() {
    console.log(this.name + " barks."); //このthisは親このthisは子クラスだが、子クラスにはnameフィールドが存在しないからプロトタイプチェーンで親クラスのフィールドを参照しにいく？
  }
});

// インスタンス作成
var dog = new Dog("Rex");
dog.speak(); // "Rex barks."
-------------------------------------------------------

$super(name)で親クラスのinitializeメソッドを呼び出すが
子クラスはthis.nameのnameフィールドを持っていない。
この時、プロトタイプ継承で内部的に親クラスの
そのため、親クラスのフィールド（例えばname）が子クラスのインスタンスからも参照可能となる。

