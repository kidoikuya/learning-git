・forEach
  配列の要素を順番に引数として渡して、与えられた関数を一度ずつ実行する。
  ------------------------------------------------------------
  const numbers = [1, 2, 3, 4, 5];
  numbers.forEach((num) => {
    console.log(num); // 出力: 1 2 3 4 5
  });
  ------------------------------------------------------------

・find
  配列の先頭から順番に検索して、与えられた関数の評価結果がtrueとなる最初の要素を返す。
  ------------------------------------------------------------
  const numbers = [1, 2, 3, 4, 5];
  const found = numbers.find((num) => num > 3);
  console.log(found); // 出力: 4
  ------------------------------------------------------------

・findLast
  配列の最後の要素から順番に検索して、評価結果がtrueとなる最初の要素を返す。
  ------------------------------------------------------------
  const numbers = [1, 2, 3, 4, 5];
  const foundLast = numbers.findLast((num) => num > 3);
  console.log(foundLast); // 出力: 5
  ------------------------------------------------------------

・findIndex
  配列の先頭から順番に検索して、評価結果がtrueとなる最初の要素の位置を返す。
  ------------------------------------------------------------
  const numbers = [1, 2, 3, 4, 5];
  const index = numbers.findIndex((num) => num > 3);
  console.log(index); // 出力: 3
  ------------------------------------------------------------

・findLastIndex
  配列の最後の要素から前に向かって順番に検索して、評価結果がtrueとなる最初の要素の位置を返す。
  ------------------------------------------------------------
  const numbers = [1, 2, 3, 4, 5];
  const indexLast = numbers.findLastIndex((num) => num > 3);
  console.log(indexLast); // 出力: 4
  ------------------------------------------------------------

・filter
  引数の関数が出した評価結果がtrueの要素だけ集めて新しい配列オブジェクトを返す。
  ------------------------------------------------------------
  const numbers = [1, 2, 3, 4, 5, 6];
  // 偶数だけを抽出する関数
  const evenNumbers = numbers.filter((num) => num % 2 === 0);
  console.log(evenNumbers); // 出力: [2, 4, 6]
  ------------------------------------------------------------

・map
  与えられた関数の戻り値が要素となる新しい配列オブジェクトを返す。
  ------------------------------------------------------------
  const numbers = [1, 2, 3, 4];
  const doubled = numbers.map((num) => num * 2);
  console.log(doubled); // 出力: [2, 4, 6, 8]
  ------------------------------------------------------------

・reduce
  与えられた関数に前の要素に対する計算結果と次の要素の値を引数として渡して実行し、最終的な計算結果を返す。
  ------------------------------------------------------------
  const numbers = [1, 2, 3, 4];
  const sum = numbers.reduce((acc, num) => acc + num, 0);
  console.log(sum); // 出力: 10
  ------------------------------------------------------------

・every
  配列の要素をテストし、すべての要素が評価結果がtrueの場合はtrueを返す。
  ------------------------------------------------------------
  const numbers = [2, 4, 6];
  const allEven = numbers.every((num) => num % 2 === 0);
  console.log(allEven); // 出力: true
  ------------------------------------------------------------

・some
  配列の要素をテストし、1つでも評価結果がtrueの場合はtrueを返す。
  ------------------------------------------------------------
  const numbers = [1, 2, 3, 4];
  const hasOdd = numbers.some((num) => num % 2 !== 0);
  console.log(hasOdd); // 出力: true
  ------------------------------------------------------------
