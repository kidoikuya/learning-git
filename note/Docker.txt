■イメージ取得
docker image pull mysql:latest

■コンテナ作成＆起動
docker container create --name mysql001 -e MYSQL_ROOT_PASSWORD=1234 -p 3307:3306 mysql
docker container start mysql001
docker container exec -i -t mysql001 mysql -u root -p

-----------------------------------------------------------------------------------------------------------------------------------------

■参考URL
https://shk-education-docker.netlify.app/docs/Docker%E3%81%AE%E4%BD%BF%E3%81%84%E6%96%B9%E3%82%92%E5%AD%A6%E3%81%B6/docker-text-1

■dockerバージョン確認
・dockerとPowerShellを起動
・docker --version ※dockerが立ち上がっていないと反応しない。
  Docker version 27.2.0, build 3ab4256

■docker状態確認コマンド
・docker image ls
・docker container ls  ※-aオプションで停止中のコンテナも見れる

■コンテナイメージをダウンロード
・docker image pull httpd:latest
  ローカルのtarから取り込む場合、docker load --input [tarファイル名]
・docker image lsで取得済イメージの確認
  REPOSITORY   TAG       IMAGE ID       CREATED        SIZE
  httpd        latest    5daf6a4bfe74   2 months ago   148MB

■コンテナ作成
・docker container create --name apache001 -p 8081:80 httpd
  --name 任意のコンテナ名
  runにしない理由はコンテナ作成後に起動させないため。
  -pはポート番号、(ホスト)8081:80(httpd)

■コンテナ起動
・docker container start apache001
・docker container ls
  起動中のコンテナを表示。※-aオプションで停止中のコンテナも表示できる。

■ローカルのApachサーバに接続
・ローカルホスト内のApachサーバ(8081)にアクセスするURL↓
  http://localhost:8081/index.html

■ApachにHTMLファイルを設置(コピー)する。
・docker container cp コピー元ファイルパス コンテナ名:コピー先のディレクトリパス
・htmlを作成してパスをコピー 
・Apache HTTP Serverで配信するファイルは /user/local/apache2/htdocs/
・docker container cp C:\Users\SHK007\Desktop\top.html apache001:/usr/local/apache2/htdocs/

■ローカルネットワーク上の自分自身のPC上で動いているApachサーバにアクセス
・ipconfigで自分のアドレス見てアクセスしてみる。
  http://192.168.3.211:8081/top.html

■コンテナの停止
・docker container stop apache001
・docker container ls -a ※Exitedなら停止中

■コンテナの削除 ※停止中じゃないと削除出来ない
・docker container stop apache001

■コンテナのイメージ化
・docker container commit [コンテナ名] [書き出すイメージ名]
→ docker container commit apache005 my_original_apache
→ docker image ls

■イメージの削除方法
イメージから作成されたコンテナを全て停止している状態でなければイメージは削除できない。
・IMAGE IDを確認
  docker image
・IMAGE ID を指定して削除
  docker rmi e57d3fdd2d7e
・イメージ名:タグを指定して削除
  docker rmi httpd:latest

■DockerHubのログイン方法
・ログイン確認
・docker login --username kidoikuya88
・docker build -t testimage .
・docker loginを入力後、Login Suceededと表示されていればログイン成功

■DockerHubにイメージをpushする方法(pushする度にタグ付けしなければいけない)
・前提条件
  DockerHubにログイン
  Create a Repositoryボタンを押下
  RepositoryNameに任意のリポジトリ名を設定
  Short descriptionにはリポジトリの説明(空白可)
・イメージにタグをつける
  docker tag mylearning kidoikuya88/pra:latest
  docker imagesでtagが付いたか確認。
・pushする
  docker push kidoikuya88/pra:latest
・DockerHub上で確認

■DockerHubからpullする方法
  docker pull kidoikuya88/pra:latest

■ボリュームマウント
DockerEngine上の記憶領域上にディスクを作成し、コンテナにマウントする。
コンテナを削除してもディスクは削除されない。
※アップデート作業等でコンテナを再起動する時にコンテナ内に記憶領域があると全部飛んで終わる。

■バインドマウント
DockerEngin外のホストOSのハードディスクを参照(借りる)感じ。
ただし、この話は開発途中でのお話。本番は物理サーバ借りて運用するので参照先は変わる。

■DockerCompose
コンテナ同士を仮想ネットワークで繋げる技術。
複数コンテナとネットワークを使う場合はDockerComposeを使うと一括操作出来るので便利。