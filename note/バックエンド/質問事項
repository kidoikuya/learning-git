・P36の⑤のチェック方法はどうやってるのか。

・総合演習７
  リフレクションgetDeclaredFieldでprivateフィールドが取得出来てしまうならカプセル化って意味ある？
  →リフレクションを使う場合でも、setAccessible(true) を呼び出さない限りアクセスは制限されます。
    そもそもリフレクションはテストフレームワークやDIで危険があるが必要なので使うという性質で使われる。
    だから、リフレクションを伴うフィールドインジェクションは非推奨であり、コンストラクタインジェクションが推奨。
    
    ちょっと曖昧：引数無しでインスタンス化するとfinalの値を初期化していない旨のコンパイルエラーになる。
    これ、コンストラクタインジェクションのせいだけど、フィールドインジェクションのテスト時はどうする？
    参考コードのインスタンス作成は2個とも別処理で作成済だからカットした。

・総合演習８
  総合演習６の時みたいにth:object使わないの？
  →フォームの値をビューで表示するだけだから、バックエンド関係ないのが理由？
    だとしたら、Beanを使っていない代わりにリクエストスコープを使ってる？
    ・フォームバインディング
      特にWebフォームのデータをサーバーサイドのオブジェクトにバインドすることに特化した技術。
      フォームに入力されたデータをJavaオブジェクトのプロパティにマッピングするために使われます。
      こっちがバリデーションなどのバックエンド処理をするのに使われるっぽい。
    ・データバインディング
      データとUIの間で双方向または一方向のデータ同期を行う広い概念です。
      UI（ビュー）とバックエンド（データ）間でデータを自動的に同期する仕組みを指します。
      これがいまいちわからない。

～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～


・総合演習１１
<!-- index.htmlに飛ぶこと無いのに何で書いてあるの？ -->
  <form method="post" action="index.html" th:action="@{/login}"> 
      ユーザーId: <input type="text" name="username"><br>
      パスワード: <input type="password" name="password"><br>
      <button type="submit">ログイン</button>
  </form>
→Thymeleafのth:action属性を使うことで、HTMLにトークンを埋め込むことが可能だから。

・コンテキストパス
<!-- th:hrefはコントローラに「/login」があればリンクを貼る、無ければ何もしない --> 
<!-- hrefじゃだめなの？hrefだとコンテキストパスが考慮されない＝アプリがデプロイされた場所によってはパスが通らない可能性がある -->
<!-- コンテキストパスを明示的に設定しない場合、Tomcatが自動的にルートに設定する。その場合http://localhost:8080/～になる。 -->
<!-- コンテキストパスがwebappの場合はhttp://localhost:8080/webapp/～になる。 -->
<!-- th:hrefはコンテキストパスの変化を考慮して「動的に」URLを生成してくれるので汎用性が高い。 -->
<!-- Springの場合、application.propertiesにコンテキストパスが書かれているか確認出来る。server.servlet.context-path=/myappなどの記載が無ければルート。  -->


