- 環境構築 ------------------------------------------------------------------------------------------------------------------
■ポート
Apach 80 静的プログラム
Apach Tomcat 8009 動的プログラム(JSPやサーブレット)

■エクリプスでサーバ利用する準備
・ウィンドウ＞パースペクティブ＞サーバ
・パッケージエクスプローラが非表示になるのでビューの表示から表示させる。
・新規＞動的プロジェクト
・サーバ起動やHTMLファイル作成
https://sukkiri.jp/books/sukkiri_servlet4/sukkiri_servlet4_appendix

- 開発知識 ----------------------------------------------------------------------------------------------------
■スコープ
・リクエストスコープ (request): リクエストが完了するまでデータが保持されます。
  登録 request.setAttribute("属性名", "属性値");
  取得 
・セッションスコープ (session): ユーザーのセッションが終了するまでデータが保持されます。
  登録 session.setAttribute();
  取得 
・アプリケーションスコープ (application): サーバーが停止するまでデータが保持されます。
・ページスコープ (page): ページ内でのみデータが有効です。

■JavaBeans
通常はprivateフィールド（プロパティ）、ゲッター、セッターだけの単純クラス。
複数の情報をクラスにまとめてカプセル化することで
request.setAttribute() や session.setAttribute() に
Beanオブジェクトとして複数情報（ログインIDとユーザー名等）をまとめて渡すことができる。

■JavaBeansとスコープの使い分け
セッションスコープにログインIDを格納するのが最も一般的です。
特に、ユーザーがログインしている間、ログインIDはセッションを通じて管理するのが自然です。
Beans を使う場合は、ログインID以外にもユーザーに関する他の情報を一括で管理したいときや
データの整合性をオブジェクト指向で管理したいときに適しています。

■アノテーション
@WebServlet(urlPatterns = ("*.action"))
@WebServletがアノテーション、Javaクラス内でServletの設定を行うことでXMLの設定が不要になる。
urlPatternsは、どのURLパターンに対してこのServletをマッピングするか指定する属性。
"*.action" という風にURLパターンに「*」を使ってマッピングする事も可能。
Webアプリケーション内(動的プロジェクト内)で特定のURLパターンが呼び出されたら対応したサーブレットを動かす。
総合演習ではサーブレット1つのみを定義しコントローラーとする一元管理のモデル、MVCが採用されていた。


-- 総合演習内でのメモ ----------------------------------------------------------------------------------------------------------

■セッションスコープにいつcustomer2が登録された？
・index.jspからFrontcontroller経由でLoginActionが呼び出される。
・ログインIDとパスワードが CustomerDAO の search メソッドを使ってデータベースに照会される。
※ここがわかりにくいポイント
  searchメソッド前にCustomer2 customer2 = (Customer2) session.getAttribute("customer2");が入力されている！？
  これは取得しようとしているが、初ログイン時にはセッションスコープは空なのでnullが返る。
  この時、すでにログイン済みの場合のみセッションスコープが返り、login-out.jspに遷移させる。
・データベースに一致するユーザー情報が見つかった場合、その情報を使って Customer2 オブジェクトが生成されcustomer2 変数に格納される。
・customer2 が null でない（つまり、ユーザー情報が正常に取得できた）場合、次にセッションに customer2 を登録します。
  ここでようやく、session.setAttribute("customer2", customer2); が呼び出され、customer2 オブジェクトがセッションスコープに保存される。

■テーブル全取得→リクエストスコープに登録
CustomerDAO customerDAO = new CustomerDAO();
List<Board> boardList = customerDAO.getAllBoards2();
request.setAttribute("boardList", boardList);

■テーブル編集後→リクエストスコープ登録
// 更新後のリストをリクエストスコープに設定
boardList = customerDAO.getAllBoards2();
request.setAttribute("boardList", boardList);

■ユーザID取得
・セッションスコープからログイン中のユーザー情報を取得(session利用)
  Customer2 loggedInUser = (Customer2) session.getAttribute("customer2"); // Customer2 をセッションから取得
  String loggedInLoginId = loggedInUser.getLoginId(); // ログインしている場合、ログインIDを取得

・リクエストスコープからログイン中のユーザー情報を取得
  Customer2 loggedInUser = (Customer2) request.getAttribute("customer2"); // Customer2 をセッションから取得
  String loggedInLoginId = loggedInUser.getLoginId(); // ログインしている場合、ログインIDを取得

・リクエストスコープから取得
  Customer2 loggedInUser = (Customer2) request.getSession().getAttribute("customer2");
・request.getSession()
  リクエストに関連付けられた HttpSession オブジェクト を取得する。
  もしセッションがまだ存在しない場合は、新しいセッションを作成して返す（引数を渡さなければ新しいセッションが自動的に作成される）。
  セッションは、ユーザーとのやり取りの状態（例えば、ログイン情報、カートの中身など）を保持するために使用されます。
・getAttribute("customer2"):
  これは、現在のセッションオブジェクトから "customer2" という名前で保存されている オブジェクト を取得するメソッドです。
  もし "customer2" がセッションに保存されていれば、そのオブジェクトが返されます。
  もし "customer2" という名前で何も保存されていなければ、null が返されます。
・request.getSession().getAttribute("customer2")
  現在のセッションから "customer2" という名前の属性を取得するコードです。
  セッションにその属性が存在すれば、それを取得して使用できます。存在しなければ、null が返されます。






























