■UIアクション（リスト）
リスト表示した画面で聞いてくる
リスト表示した時のヘッダー
リスト下部ボタンはフッター下
リスト選択肢はレコードにチェック入れるとアクション選択できる
コンテキストはリストのレコードを右クリック

■ドキュメント
https://www.servicenow.com/docs/ja-JP/bundle/xanadu-platform-administration/page/administer/list-administration/task/t_EditingAUIAction.html

・テーブル
  デフォで選択テーブルを拡張するテーブルにもUIアクションが表示される。

・順序
  UI アクションが表示される順番。ボタンには左から右へ、メニューアクションには上から下への順番が適用。

・アクション名
  スクリプトで UI アクションを参照するときに使用する一意の名前。

・レコード作成時に表示
  フォーム画面の送信ボタン横にアクションボタンを表示。

・レコード更新時に表示
  リスト画面の更新ボタン横にアクションボタンを表示。

・クライアント
  チェックを入れると「クリック時」の入力欄が表示される。
  ここに関数と引数で呼び出す記述をし、スクリプト欄にその関数を定義する。
  --------------------------------------------------------------------
  "UIアクションボタンからUIアクション画面で定義したスクリプトを実行させる例"
  クリック時
  onClickAction()
  スクリプト
  function onClickAction() {
      alert("ボタンがクリックされました！");
  }
  -------------------------------------------------------------------- 
  "fireEventで既存のクライアントスクリプト(onChange)をUIアクションボタンから実行"
  クリック時
  onClickAction()
  function  onClickAction() {
    gForm.fireEvent('onChangeを設定済のフィールド名'); // これで間接的に既存のスクリプトを発火。
  }
  --------------------------------------------------------------------

・上書き
  この UI アクションが上書きする UIアクションのsys_idを指定。
  上書きされた UIアクションは無効化され、ユーザーに表示されなくなる(非推奨)
  上書きする対象の UIアクションのアクティブを外す方が安全。

・条件
  UIアクションを表示する条件式を記載、trueなら表示される。
  例:gs.hasRole('admin') //; admin権限を持っているユーザのみ表示されるボタン 
  例:current.isNew() //;レコード新規作成時のみ表示←「レコード作成時に表示」のオプション使うのと同じ事。
  例:current.status == 'New' && gs.hasRole('admin')
  current.statusとは現在のレコードの「ステータス」フィールドの値を取得するために使用
  インシデントの場合、current.status == Resolved(解決済)って感じ。

-----------------------------------------------------------------------------------------------------

・フォームボタン
  送信ボタンの横に「任意の名前」のボタン追加
  右上のフォームメニューにも送信ボタンと「任意の名前」のボタン追加。

・フォームのコンテキスト
  アイテムをフォームコンテキストメニュー (フォームヘッダーを右クリック) に配置
  
・フォームリンク
  フォーム下部に名前のリンクを配置。

・フォームスタイル
  プライマリ  : 青色
  破棄        : 赤色
  書式設定なし: 色を付けない

-----------------------------------------------------------------------------------------------------

・バナーリストボタン？？？
  「リストを表示画面」の左上にUIアクションボタンを表示。

・リスト下部ボタン
  「リストを表示画面」の下部にUIアクションボタンを表示。

・リストコンテキストメニュー
  「リストを表示画面」のリスト内のセルを右クリで表示されるメニュー最下部にアクション表示

・リスト選択肢
  「リストを表示画面」の下部の「選択した行のアクション」にアクション表示。
  リスト下部のボタンは、リスト選択アクションと同様、条件に関係なく表示され、
  実行時にレコードごとに評価されます。

・リストリンク
  「リストを表示画面」の下部にリンク表示

・リストスタイル
  プライマリ  : 青色
  破棄        : 赤色
  書式設定なし: 色を付けない

-----------------------------------------------------------------------------------------------------

・メッセージ
フォーム上部のバナー領域
UIアクションの実行結果として、メッセージはフォーム上部に一時的に表示。
通常、g_form.addErrorMessage() や g_form.addInfoMessage() を使用してメッセージを表示。
---------------------------------------------------------------
// エラーメッセージをフォーム上部に表示
g_form.addErrorMessage('このフィールドは必須です。');
// 情報メッセージをフォーム上部に表示
g_form.addInfoMessage('レコードが正常に更新されました。');
---------------------------------------------------------------
	UIアクションが、メッセージ [sys_ui_message] テーブルから
  ローカライズされた代替メッセージを検索するためのキーとして使用できるテキスト文字列。
  [メッセージ] フィールドの個別の行にある各メッセージキー。
  インスタンスは、UI アクションが getMessage(msg) 呼び出しを行うたびに
  ローカライズされたメッセージ文字列を探します。
  ここで msg 文字列は [メッセージ] フィールドのキーと一致している必要があります。

・コメント
  このUIアクションを説明するコンテンツ。
  レコードに関連する詳細情報として入力されるもので
  アクティビティストリームや履歴に記録されます。
  コメントは、特にタスクの履歴として使われ
  ユーザーや管理者がレコードに関して実施したアクションや説明を残すために利用されます。
  "コメントを追加するコードは、work_notes や comments フィールドに書き込む"ことでレコードに追加。
---------------------------------------------------------------
  var gr = new GlideRecord('incident');
  if (gr.get('sys_id', 'your_sys_id_here')) {
      gr.work_notes = '問題に対応しました。';
      gr.update();
  }
---------------------------------------------------------------
  var gr = new GlideRecord('incident');
  if (gr.get('sys_id', 'your_sys_id_here')) {
      gr.comments = 'インシデントが解決されました。';
      gr.update();
  }
---------------------------------------------------------------
  ;・comments フィールド:
  エンドユーザーや関係者に向けた公開コメントです。
  例えば、インシデントの解決状況をエンドユーザーに通知する場合などに使用します。
  これに記録された内容は、ユーザーが閲覧でき、インシデントのステータス更新などにも利用されます。
  ;・work_notes フィールド:
  作業履歴や進捗状況を内部で記録するためのコメントです。
  サポート担当者や管理者が行った作業内容や対応結果を記録します。
  このコメントは通常、ユーザーには表示されませんが、
  管理者やサポートチームが参照するための重要な情報源となります。


・ヒント
  ユーザがこの UI アクションコントロールをポイントしたときに表示されるテキスト。


・ワークスぺース

・ロールが必要