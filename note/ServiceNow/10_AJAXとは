■忘却時用
-クライアントスクリプト------------------------------------------------------------------------------------------------------------------
function onChange(control, oldValue, newValue, isLoading, isTemplate) {
    if (isLoading || newValue === '') { return; }

	// 費目名を再選択時の入力値リセット
    g_form.setValue('deposit', '');   // 入金額のフォーム
    g_form.setValue('withdraw' , ''); // 出金額のフォーム
    g_form.setValue('memo', '');      // 入金額のフォーム
    g_form.setValue('memo2' , '');    // 出金額のフォーム

	// 費目名を再選択時の表示制御
    g_form.setDisplay('deposit', false);  // 入金額のフォーム
    g_form.setDisplay('withdraw', false); // 出金額のフォーム
    g_form.setDisplay('memo', false);     // 入金理由のフォーム
    g_form.setDisplay('memo2', false);    // 出金理由のフォーム

	// sys_id取得・表示
  	g_form.setValue('sys_id_in',newValue);

	// getReference使用バージョン
	  g_form.getReference('item', function(record){ // item(参照用フォーム) ← newValueは駄目だった
    g_form.setValue('himo_name2',record.himo);    // 参照先から取得した値をセット。
    });

	// GlideAjaxでGlideRecord利用
    var ga = new GlideAjax('ItemFetcher');
	  ga.addParam('sysparm_name','getItemDetails');
    ga.addParam('sysparm_sys_id', newValue); // addParamに渡す第一引数は全て「sysparm_」を付けること。
	  ga.addParam('sysparm_table_name', 'x_1606430_shk_hand_x_1606430_shk_hand2');
    ga.getXMLAnswer(function(answer){

        // レスポンスを処理
        var res = JSON.parse(answer);
        console.log('★res★' + JSON.stringify(res));      // 例→ ★res★{"result":["消耗品費","c_withdrawal"]}
        if (res.result[0] && res.result[1]) {              //; レスポンスの有無を確認
            g_form.setValue('himo_name', res.result[0]);   // 費目名をセット
                if(res.result[1] === 'c_deposit'){         //; 入金or出金の判定
                    g_form.setValue('category' , "入金");  // 入金をカテゴリのフォームにセット
                    g_form.setDisplay('deposit' , true);   // 入金額のフォームを表示
                }else{
                    g_form.setValue('category' , "出金");  // 出金をカテゴリのフォームにセット
                    g_form.setDisplay('withdraw' , true);  // 出金額のフォームを表示
                }
        } else {
            console.log('一致するレコードが見つからない');
        }
    });
}

-getバージョン-------------------------------------------------------------------------------------------------------------
var ItemFetcher = Class.create();
ItemFetcher.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {
 
    getItemDetails: function() {
        var result = [];
        var sys_id = this.getParameter('sysparm_sys_id');
        var table  = this.getParameter('sysparm_table_name');
 
        // sys_idでレコードの絞り込み
        var gr = new GlideRecord(table);
        if (gr.get(sys_id)) {
            result.push(gr.himo.toString()); //ドットウォーク検証
            result.push(gr.getValue("category"));
        return JSON.stringify({'result' : result});
        }
    },
    type: 'ItemFetcher'
});

-addQueryバージョン-------------------------------------------------------------------------------------------------------------
var ItemFetcher = Class.create();
ItemFetcher.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {

    getItemDetails: function() {
        var result = [];
		var sys_id = this.getParameter('sysparm_sys_id');
		var sys_id2 = '6d6cec8b835b52106b58c8efeeaad384'; // 実験用で固定sys_id(家賃)
		var table  = this.getParameter('sysparm_table_name');

		// sys_idでレコードの絞り込み
        var gr = new GlideRecord(table);
        gr.orderByDesc('sys_id');  // 降順ソートで実験用「家賃」が最後尾に配置
        gr.addQuery('sys_id' , sys_id).addOrCondition('sys_id' , sys_id2);
		gr.query(); // クライアント側は0,1だけ出力。2,3はデべ確認。

		// INの実験(力技っぽい)
    // gr.orderByDesc('sys_id');  // 降順ソートで実験用「家賃」が最後尾に配置
		// gr.addQuery('sys_id', 'IN', sys_id + ',' + sys_id2);
		// gr.query(); // クライアント側は0,1だけ出力。2,3はデべ確認。

		while(gr.next()){
			result.push(gr.himo.toString());
			result.push(gr.getValue("category"));
		}
		return JSON.stringify({'result' : result}); 
    },
    type: 'ItemFetcher'
});
--------------------------------------------------------------------------------------------------------------










■ServiceNowのAJAX
プロトタイプ無しのクラスを作り、そのprototypeに
extendsObjectでglobal.AbstractAjaxProcessorを任意の処理内容で拡張して代入。
クライアント側からGlideAjaxの引数でクラスを渡すと
サーバ側にリクエストを送れるようになる。
--------------------------------------------------------------------------------------------------------------
・スクリプトインクルード
var test = Class.create();
test.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {
	getParams(){
		const param1 = this.getParameter("param1");
		const param2 = this.getParameter("param2");

    // 文字列じゃないと返せないのでJSON文字列に変換して返している。
    // プロパティ―と値が同じだから省略してparam1だけ書いてる。
		return JSON.stringify({
                    param1,
                    param2
                });
	},
    type: 'test' // これはデフォルト入力される値っぽい、ヒントとして使われるっぽい。任意の名前に変更可能。
});
--------------------------------------------------------------------------------------------------------------
・クライアントスクリプト
const ga = new GlideAjax("test");  // "test"というScript Includeを指定
ga.addParam("sysparm_name", "getParams");  // sysparm_nameは固定、第二に呼び出すメソッド名
ga.addParam("param1", param1);  // 送信するパラメータ
ga.addParam("param2", param2);  // 送信するパラメータ
ga.getXMLAnswer(function(answer){ //; ここでgaに蓄積した情報を基に非同期でanswer受取りコールバック実行。
    const data = JSON.parse(answer);  // レスポンスをJSONとして解析
    console.log(JSON.stringify(data, null, 2));
});
-------------------------------------------------------------------------------------------------------




■AJAX（Asynchronous JavaScript And XML）
1. AJAXの特徴
ページをリロードせずにデータを取得・送信できる
→ 例: Googleマップ、チャットアプリ、検索のオートコンプリートなど
非同期通信が可能（バックグラウンドで処理）
→ ユーザーの操作を妨げずにデータを送受信できる
XML以外のデータも使える（JSON, HTML, プレーンテキストなど）
→ JSONが主流になり、XMLはあまり使われなくなった

2. AJAXの基本的な仕組み
JavaScriptのXMLHttpRequestオブジェクト（またはfetch APIやAxios）を使ってリクエストを送る
サーバーがリクエストを受け取り、データを返す（通常はJSON形式）
JavaScriptが受け取ったデータを処理し、ページの一部を更新

3. AJAXの実装方法
------------------------------------------------------------------------------
(1) XMLHttpRequest を使う（古いやり方
var xhr = new XMLHttpRequest();
xhr.open("GET", "https://api.example.com/data", true); // 非同期通信
xhr.onreadystatechange = function() {
  if (xhr.readyState === 4 && xhr.status === 200) {
    console.log(xhr.responseText); // サーバーからのレスポンスを表示
  }
};
xhr.send();
------------------------------------------------------------------------------
(2) fetch API を使う（モダンなやり方）
fetch("https://api.example.com/data")
  .then(response => response.json())  // JSONとしてパース
  .then(data => console.log(data))    // データを表示
  .catch(error => console.error("Error:", error));
------------------------------------------------------------------------------
(3) jQueryの$.ajax()（jQueryを使う場合）
$.ajax({
  url: "https://api.example.com/data",
  method: "GET",
  success: function(data) {
    console.log(data);
  },
  error: function(error) {
    console.error("Error:", error);
  }
});
------------------------------------------------------------------------------



■Prototype.js と jQuery の比較
Prototype.js
・ネイティブオブジェクトを拡張するため標準のJS動作を変更することがあった。
-------------------------------------------
// Prototype.js を使った Ajax リクエスト
new Ajax.Request('/data', {
  method: 'get',
  onSuccess: function(response) {
    console.log(response.responseText);
  }
});
-------------------------------------------

jQuery
・$() を使って簡単に書ける。
・ネイティブオブジェクトを汚染しない=他ライブラリと共存しやすい
・Prototype.js はIEとの互換性に問題があったが、jQueryはより幅広いブラウザで動作
・豊富なプラグイン → UI関連の拡張が容易
-------------------------------------------
// jQuery を使った Ajax リクエスト
$.get('/data', function(data) {
    console.log(data);
  });
-------------------------------------------
  
今新しく開発するなら、どちらも使わずに下記がオススメ。
・ネイティブのJavaScript (Vanilla JS)
・モダンフレームワーク（React, Vue, Angular）